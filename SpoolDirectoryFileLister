package com.tcs.flume.mme.client;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.concurrent.TimeUnit;

import org.apache.commons.io.FileUtils;
import org.apache.log4j.PropertyConfigurator;
import org.apache.log4j.Logger;

public class SpoolDirectoryFileLister {

  String[] FILE_TEXT_EXT = new String[] {"gz"};
  String feedtype;
  String feedlocation;
  String creationts;
  String businessts;
  Logger logger = Logger.getLogger(SpoolDirectoryFileLister.class);

  public ArrayList< String > getFilesInPath( String path ) 
  {
	  PropertyConfigurator.configure("log4j.properties");	  
	  ArrayList< String > ret = new ArrayList< String >();
	  try{  
    
		  File dir = new File(path);
	   
          List<File> files = (List<File>) FileUtils.listFiles(dir, FILE_TEXT_EXT, false);
          
      for( File file: files )
      {
    	  long filesize = file.length();
    	  if(filesize!=0){
    		  ret.add( file.getPath());
    	  }
    	  else{
    		  logger.info("An empty file is present in the directory. Hence the empty file "+ file + "will not be considered for processing.");
    	  }
      }

    } catch ( IllegalArgumentException x) {
    	logger.error(x.toString());
    	System.exit(0);
    }
	  catch( Exception e ) {
      logger.error( e.toString() );
    } 
    return ret;
  }

    public File getTempLocalInstance( String remoteFilePath ){
	  PropertyConfigurator.configure("log4j.properties");
	  
	File tempFile = null;
 

    try {
     
    	File src=new File(remoteFilePath); 
      tempFile = File.createTempFile("tmp",null, null);
    
      FileUtils.copyFile(src, tempFile);
      tempFile.deleteOnExit();

     
    } catch( Exception e ) { 
      e.printStackTrace();
      logger.error( e.toString() );
      return null;
    } 
    
    return tempFile;
  }

  public byte[] getContents( String remoteFilePath ) 
  {
	  PropertyConfigurator.configure("log4j.properties");
    byte[] buffer = null;

    //TODO: stream instead of copy entire file
    try {
      File tempFile = getTempLocalInstance( remoteFilePath );
      buffer        = FileUtils.readFileToByteArray( tempFile );
    } catch( Exception e ) { 
      //TODO: this needs to be more robust than just catching all exceptions
      e.printStackTrace();
      logger.error( e.toString() );
    } 
    
    return buffer;
  }
  
  public boolean statsGenerator(int loadedlines, int failedlines, String Filename){
	
	  PropertyConfigurator.configure("log4j.properties");

	  try {
		  
			File file = new File(Filename+".stats");

			
			if (!file.exists()) {
				file.createNewFile();
			}

			FileWriter fw = new FileWriter(file.getAbsoluteFile());
			BufferedWriter bw = new BufferedWriter(fw);
			bw.write("File name: "+Filename+" Number of lines loaded successfully: "+loadedlines+" Number of lines failed: "+failedlines);
			bw.close();

		} catch (IOException e) {
			e.printStackTrace();
			return false;
		}
	  return true;
  }
  
public boolean auditGenerator(String Filename, String spoolPath, String businessts, int totalrows, int loadedrows , int failedrows, long startTime, long endTime, long TotalTime){
	
	
	PropertyConfigurator.configure("log4j.properties");

	if(Filename.contains("DAB"))
	{
		feedtype="OSN";
		String[] fields = Filename.split("_");
		feedlocation = fields[0].split("-")[1];
	}
	else if(Filename.startsWith("A201")){
		feedtype="MME";
		if(spoolPath.contains("PCELL-MME-1")){
			feedlocation = "PCELL-MME-1";
		}
		else if(spoolPath.contains("PCCRX-MME-1")){
			feedlocation = "PCCRX-MME-1";
		}
		else if(spoolPath.contains("PCFAR-MME-1")){
			feedlocation = "PCFAR-MME-1";
		}
		else if(spoolPath.contains("PHLW-MME-1")){
			feedlocation = "PHLW-MME-1";
		}
		else if(spoolPath.contains("PCGLB-MME-1")){
			feedlocation = "PCGLB-MME-1";
		}
		else if(spoolPath.contains("PCNTM-MME-1")){
			feedlocation = "PCNTM-MME-1";
		}
		else if(spoolPath.contains("PCRCN-MME-1")){
			feedlocation = "PCRCN-MME-1";
		}
		else if(spoolPath.contains("PCYAT-MME-1")){
			feedlocation = "PCYAT-MME-1";
		}
		else{
			feedlocation = "UNKNOWN";
		}
	}
	else if(Filename.contains("EVTLNK") || Filename.contains("billshock")){
		feedtype="NUCLEUS";
		String[] fields1 = Filename.split("_");
		switch(fields1[1]){
			case "001":
				feedlocation="SGSN";
			case "002":
				feedlocation="TAP_MACH_08";
			case "005":
				feedlocation="DOMESTIC_SSR_P_GW";
			case "006":
				feedlocation="INBOUND_SSR_S_GW";
			case "PCPAS":
				feedlocation="GGSN / ROAMED_SSR_P_GW";
			default:
				feedlocation="UNKNOWN";
		}
	}
	StringBuffer output = new StringBuffer();
	try {
		String command="date '+%y-%m-%d %H:%M:%S'"+" -r " + Filename;
		logger.info(" The unix command is: "+ command);
	    Process proc = Runtime.getRuntime().exec(command); 
        BufferedReader read = new BufferedReader(new InputStreamReader(proc.getInputStream()));
        try {
            proc.waitFor();
        } catch (InterruptedException e) {
            System.out.println(e.getMessage());
        }
        String line = "";			
		while ((line = read.readLine())!= null) {
			logger.info("Entered while loop ......."+ line);
			output.append(line + "\n");
		}
		creationts = output.toString();
		logger.info("The creationts value is: " + creationts);
    } catch (IOException e) {
        logger.error(e);
    }

	
	String var[] = businessts.split("\\.");
	String businessTimestamp = var[0];
	long duration = TimeUnit.MILLISECONDS.toSeconds(TotalTime);
	
	  try {
		    SimpleDateFormat df = new SimpleDateFormat("yyyyMMdd");
		    Date date=new Date(System.currentTimeMillis());
	        String dateText = df.format(date);
			File file = new File("OSN_Flumeclient" + dateText+ ".audit");

			
			if (!file.exists()) {
				file.createNewFile();
			}

			FileWriter fw = new FileWriter(file.getAbsoluteFile(),true);
			BufferedWriter bw = new BufferedWriter(fw);
			bw.write(Filename+":"+feedtype+":"+feedlocation+":"+creationts+":"+businessTimestamp+":"+totalrows+":"+startTime+":"+endTime+":"+duration+":"+loadedrows+":"+failedrows+"\n");
			bw.close();

		} catch (IOException e) {
			logger.error(e.getMessage());
		    return false;
		}
	  return true;
  }

}
